
// Basic UDMF stuff.


thingflags
{
	skill1 = "Skill 1";
	skill2 = "Skill 2";
	skill3 = "Skill 3";
	skill4 = "Skill 4";
	skill5 = "Skill 5";
	ambush = "Ambush";
	single = "Singleplayer";
	dm = "Deathmatch";
	coop = "Cooperative";
	friend = "Friendly";
	dormant = "Dormant";
	standing = "Standing";
	//strifeally = "Ally";
	translucent = "Translucent";
	invisible = "Invisible";
}

thingflagtooltips
{
	skill1 = "If set, this actor appears on 'I'm Too Young To Die' difficulty.";
	skill2 = "If set, this actor appears on 'Hey, Not Too Rough' difficulty.";
	skill3 = "If set, this actor appears on 'Hurt Me Plenty' difficulty.";
	skill4 = "If set, this actor appears on 'Ultraviolence' difficulty.";
	skill5 = "If set, this actor appears on 'Nightmare' difficulty.";
	ambush = "If set, this actor does not wake up if it hears the player until the player comes within field of view\n(even if the actor is facing the away from the player).";
	single = "If not set, the actor does not appear in singleplayer modes.";
	dm = "If not set, the actor does not appear in deathmatch modes.";
	coop = "If not set, the actor does not appear in co-op modes.";
	friend = "If set, the actor is friendly to the player.\nIf it is a monster, it will attack other players.";
	dormant = "If set, the actor can't be damaged or interact with anything.\nThe Thing_Activate special or ACS function will remove this property,\nonce activated.";
	standing = "If set, the actor stands still, used for certain Strife enemies.";
	//strifeally = "Ally";
	translucent = "If set, allows you to somewhat see through the sprite.";
	invisible = "If set, the sprite of this monster is not drawn.";
}


// Default flags for first new thing
defaultthingflags
{
	skill1;
	skill2;
	skill3;
	skill4;
	skill5;
	single;
	coop;
	dm;
}


linedefflags
{
	blocking = "Impassable";
	blockmonsters = "Block monster";
	twosided = "Doublesided";
	dontpegtop = "Upper unpegged";
	dontpegbottom = "Lower unpegged";
	secret = "Secret";
	blocksound = "Block sound";
	dontdraw = "Hidden";
	mapped = "Shown";
}

linedefflagtooltips
{
	blocking = "If set on a 2-sided linedef, the linedef blocks players and monsters from being able to move through it. \nThis is typically used for mid-textured cage bars.\nBy convention, most doom-related software sets it for 1-sided lines by default because the\nid Software maps did, but it doesn't actually do anything.";
	blockmonsters = "If set, blocks only monster movement.\n(in addition to whatever existing blocking properties it would have).";
	twosided = "If set, then it has 2 sidedefs and acts as a connection between two sectors.";
	dontpegtop = "If set:\nIf the linedef is 2-sided, the upper texture starts at the height of the higher ceiling.\nIf not set: and the linedef is 2-sided, the upper texture starts at the lower ceiling instead.\nIf the linedef is 1-sided, this does nothing.";
	dontpegbottom = "If set: If the linedef is 2-sided, the lower texture starts at the height of the higher ceiling.\nIf not set: and the linedef is 2-sided, the upper texture starts at the higher floor instead.\nIf the linedef is 1-sided, this makes the mid texture start at floor instead of the ceiling.\nYou probably want to use this for door tracks if you don't want them to move with the door.";
	secret = "If set, this flag prevents it from being marked as a switch or a door on the automap.";
	blocksound = "If set, this linedef will partially block monster-waking sound from passing into the sector on the other side of it.\nNote that a sound must try to pass through two of these lines before being blocked.\nThis does not block the actual audio that the player hears at all, it is only for the monster AI.\nThis does nothing for 1-sided linedefs.";
	dontdraw = "If set, this line is not shown on the automap even if you are looking directly at it";
	mapped = "If set, this line is always revealed on the automap even if you haven't actually visited the area.";
}


linedefactivations
{
	playercross = "When player walks over";
	playeruse = "When player presses use";
	monstercross = "When monster walks over";
	monsteruse = "When monster presses use";
	impact = "On hitscan/projectile impact";
	playerpush = "When player bumps";
	monsterpush = "When monsters bumps";
	missilecross = "When projectile crosses";
	repeatspecial = "Repeatable action";
	passuse = "Pass use on";
}


/*
MAP LUMP NAMES
Map lumps are loaded with the map as long as they are right after each other. When the editor
meets a lump which is not defined in this list it will ignore the map if not satisfied.
The order of items defines the order in which lumps will be written to WAD file on save.
To indicate the map header lump, use ~MAP

Legenda:
required = Lump is required to exist.
blindcopy = Lump will be copied along with the map blindly. (usefull for lumps Doom Builder doesn't use)
nodebuild = The nodebuilder generates this lump.
allowempty = The nodebuilder is allowed to leave this lump empty.
script = This lump is a text-based script. Specify the filename of the script configuration to use.
*/

udmfmaplumpnames_begin
{
	~MAP
	{
		required = true;
		blindcopy = true;
		nodebuild = false;
	}
	
	TEXTMAP
	{
		required = true;
		nodebuild = true;
		allowempty = true;
	}
}

udmfmaplumpnames_end
{
	ENDMAP
	{
		required = true;
		nodebuild = false;
		allowempty = true;
	}
}


// Default thing filters
// (these are not required, just usefull for new users)
thingsfilters
{
	
	filter0
	{
		name = "Keys only";
		category = "keys";
		type = -1;
	}
	
	
	filter2
	{
		name = "Skill 1";
		category = "";
		type = -1;
		
		fields
		{
			skill1 = true;
		}
		
	}
	
	
	filter3
	{
		name = "Skill 2";
		category = "";
		type = -1;
		
		fields
		{
			skill2 = true;
		}
		
	}
	
	
	filter4
	{
		name = "Skill 3";
		category = "";
		type = -1;
		
		fields
		{
			skill3 = true;
		}
		
	}
	
	
	filter5
	{
		name = "Skill 4";
		category = "";
		type = -1;
		
		fields
		{
			skill4 = true;
		}
		
	}
	
	
	filter6
	{
		name = "Skill 5";
		category = "";
		type = -1;
		
		fields
		{
			skill5 = true;
		}
		
	}
	
	
	filter7
	{
		name = "Skill 6";
		category = "";
		type = -1;
		
		fields
		{
			skill6 = true;
		}
		
	}
	
	
	filter8
	{
		name = "Skill 7";
		category = "";
		type = -1;
		
		fields
		{
			skill7 = true;
		}
		
	}
	
	
	filter9
	{
		name = "Skill 8";
		category = "";
		type = -1;
		
		fields
		{
			skill8 = true;
		}
		
	}
	
}


// How thing flags should be compared (for the stuck thing error check)
thingflagscompare
{
	skills {
		skill1;
		skill2;
		skill3;
		skill4;
		skill5;
	}

	gamemodes {
		single;
		dm;
		coop;
	}

	classes {
		class1;
		class2;
		class3;
	}
}
