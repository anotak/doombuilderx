
linedefflags
{
	16384 = "Block Players";
}


// LINEDEF ACTIVATIONS
// Make sure these are in order from lowest value to highest value
linedefactivations
{
	6144 = "Player presses Use (PassThru)";
	7168 = "Projectile/hitscan hits/crosses";
}


// Linedef flags UDMF translation table
// This is needed for copy/paste and prefabs to work properly
// When the UDMF field name is prefixed with ! it is inverted
linedefflagstranslation
{
	6144 = "passuse";
	16384 = "blockplayers";
}


linedefflags_udmf
{
	monsteractivate = "Monster activates";
	blockeverything = "Block everything";
	blockplayers = "Block players";
	blockfloaters = "Block floating";
	translucent = "Translucent";
	jumpover = "Jump over";
	zoneboundary = "Sound zone boundary";
	clipmidtex = "Clip middle texture";
	wrapmidtex = "Wrap middle texture";
	midtex3d = "Walkable middle texture";
	blockprojectiles = "Block projectiles";
	blockuse = "Block use actions";
}

linedefflagtooltips_udmf
{
	monsteractivate = "If set, monsters can activate this line's special.";
	blockeverything = "If set, blocks all actors from moving through it,\nincluding players, monsters, keys, projectiles, hitscan gunshots.\nIt also blocks monster sight.\nNote: Does not block monster hearing.\nDoes not affect 1-sided lines.";
	blockplayers = "If set, block only players from moving through it.\n(in addition to whatever existing blocking properties it would have)\nDoes not affect 1-sided lines.";
	blockfloaters = "If set, block flying monsters like cacodemons.\n(in addition to whatever existing blocking properties it would have)\nDoes not affect 1-sided lines.";
	translucent = "Allows you to somewhat see through the middle texture\non a 2-sided line, without being completely transparent.\nDoes not affect 1-sided lines.";
	jumpover = "Means it's a railing that you have to jump over.";
	zoneboundary = "If set, this line acts as a boundary for reverb sound environments.\nThis has no effect on 1-sided lines, as they always act as boundaries for that.";
	clipmidtex = "Clips middle textures vertically to floor and ceiling.";
	wrapmidtex = "If set on a 2-sided linedef, wrap middle texture vertically, to reach to the floor or ceiling.\nDoes not affect 1-sided linedefs.";
	midtex3d = "If set on a 2-sided linedef, the middle texture on this line becomes solid walkable geometry.\nDoes not affect 1-sided linedefs.";
	blockprojectiles = "If set, block projectiles.\n(in addition to whatever existing blocking properties it would have)\nDoes not affect 1-sided lines.";
	blockuse = "If set, then players or monsters cannot pull switches or open doors on the other side of this line.";
}


linedefactivations_udmf
{
	playeruseback = "Player can use back";
	firstsideonly = "Front side only";
	checkswitchrange = "Switch height check";
}


thingflags
{
	2048 = "Translucent (25%)";
	4096 = "Invisible";
	8192 = "Friendly";
	16384 = "Frozen while inactive";
}


thingflags_udmf
{
	skill6 = "Skill 6";
	skill7 = "Skill 7";
	skill8 = "Skill 8";
	class1 = "Class 1";
	class2 = "Class 2";
	class3 = "Class 3";
	class4 = "Class 4";
	class5 = "Class 5";
	class6 = "Class 6";
	class7 = "Class 7";
	class8 = "Class 8";
}

thingflagtooltips_udmf
{
	skill6 = "If set, this actor appears on any custom 6th difficulty.";
	skill7 = "If set, this actor appears on any custom 7th difficulty.";
	skill8 = "If set, this actor appears on any custom 8th difficulty.";
	class1 = "If set, this actor appears when a player is class #1.\nFor Hexen, this a fighter.";
	class2 = "If set, this actor appears when a player is class #2.\nFor Hexen, this a cleric.";
	class3 = "If set, this actor appears when a player is class #3.\nFor Hexen, this a mage.";
	class4 = "If set, this actor appears when a player is class #4.";
	class5 = "If set, this actor appears when a player is class #5.";
	class6 = "If set, this actor appears when a player is class #6.";
	class7 = "If set, this actor appears when a player is class #7.";
	class8 = "If set, this actor appears when a player is class #8.";
}



// Thing flags UDMF translation table
// This is needed for copy/paste and prefabs to work properly
// When the UDMF field name is prefixed with ! it is inverted
thingflagstranslation
{
	2048 = "translucent";
	4096 = "invisible";
	8192 = "friend";
	16384 = "standing";
}


defaultthingflags
{
	1;
	2;
	4;
	32;
	64;
	128;
	256;
	512;
	1024;
}


defaultthingflags_udmf
{
	skill1;
	skill2;
	skill3;
	skill4;
	skill5;
	skill6;
	skill7;
	skill8;
	single;
	coop;
	dm;
	class1;
	class2;
	class3;
	class4;
	class5;
	class6;
	class7;
	class8;
}


// Default sector brightness levels
sectorbrightness
{
	255; 248; 240; 232; 224; 216; 208; 200; 192; 184; 176; 168; 160; 152; 144; 136;
	128; 120; 112; 104; 96; 88; 80; 72; 64; 56; 48; 40; 32; 24; 16; 8; 0;
}


/*
TEXTURES AND FLAT SOURCES
This tells Doom Builder where to find the information for textures
and flats in the IWAD file, Addition WAD file and Map WAD file.

Start and end lumps must be given in a structure (of which the
key name doesnt matter) and any textures or flats in between them
are loaded in either the textures category or flats category.

For textures: PNAMES, TEXTURE1 and TEXTURE2 are loaded by default.
*/
textures
{
	zdoom1
	{
		start = "TX_START";
		end = "TX_END";
	}
}


/*
ADDITIONAL UNIVERSAL DOOM MAP FORMAT FIELD DEFINITIONS
See Documents\fielddatatypes.txt for informtion on the types.
*/
universalfields
{
	linedef
	{
		comment
		{
			type = 2;
			default = "";
		}
		
		alpha
		{
			type = 1;
			default = 1.0f;
		}
		
		renderstyle
		{
			type = 16;
			default = "translucent";
			enum
			{
				translucent = "Translucent";
				add = "Additive";
			}
		}
	}
	
	sidedef
	{
		comment
		{
			type = 2;
			default = "";
		}
		
		light
		{
			type = 0;
			default = 0;
		}
		
		lightabsolute
		{
			type = 3;
			default = false;
		}
		
		nofakecontrast
		{
			type = 3;
			default = false;
		}
		
		offsetx_top
		{
			type = 1;
			default = 0.0f;
		}
		
		offsety_top
		{
			type = 1;
			default = 0.0f;
		}
		
		offsetx_mid
		{
			type = 1;
			default = 0.0f;
		}
		
		offsety_mid
		{
			type = 1;
			default = 0.0f;
		}
		
		offsetx_bottom
		{
			type = 1;
			default = 0.0f;
		}
		
		offsety_bottom
		{
			type = 1;
			default = 0.0f;
		}
		
		smoothlighting
		{
			type = 3;
			default = false;
		}
		
		scalex_top
		{
			type = 1;
			default = 1.0f;
		}
		
		scaley_top
		{
			type = 1;
			default = 1.0f;
		}
		
		scalex_mid
		{
			type = 1;
			default = 1.0f;
		}
		
		scaley_mid
		{
			type = 1;
			default = 1.0f;
		}
		
		scalex_bottom
		{
			type = 1;
			default = 1.0f;
		}
		
		scaley_bottom
		{
			type = 1;
			default = 1.0f;
		}
		
		clipmidtex
		{
			type = 3;
			default = false;
		}
		
		wrapmidtex
		{
			type = 3;
			default = false;
		}
		
		nodecals
		{
			type = 3;
			default = false;
		}
	}
	
	thing
	{
		comment
		{
			type = 2;
			default = "";
		}
		
		conversation
		{
			type = 0;
			default = 0;
		}
	}
	
	sector
	{
		comment
		{
			type = 2;
			default = "";
		}
		
		xpanningfloor
		{
			type = 1;
			default = 0.0f;
		}
		
		ypanningfloor
		{
			type = 1;
			default = 0.0f;
		}
		
		xpanningceiling
		{
			type = 1;
			default = 0.0f;
		}
		
		ypanningceiling
		{
			type = 1;
			default = 0.0f;
		}

		xscalefloor
		{
			type = 1;
			default = 1.0f;
		}
		
		yscalefloor
		{
			type = 1;
			default = 1.0f;
		}
		
		xscaleceiling
		{
			type = 1;
			default = 1.0f;
		}
		
		yscaleceiling
		{
			type = 1;
			default = 1.0f;
		}
		
		rotationfloor
		{
			type = 17;
			default = 0.0f;
		}
		
		rotationceiling
		{
			type = 17;
			default = 0.0f;
		}
		
		lightfloor
		{
			type = 0;
			default = 0.0f;
		}
		
		lightceiling
		{
			type = 0;
			default = 0.0f;
		}
		
		lightfloorabsolute
		{
			type = 3;
			default = false;
		}
		
		lightceilingabsolute
		{
			type = 3;
			default = false;
		}
		
		gravity
		{
			type = 1;
			default = 1.0f;
		}
		
		lightcolor
		{
			type = 10;
			default = 16777215;
		}
		
		fadecolor
		{
			type = 10;
			default = 0;
		}
		
		desaturation
		{
			type = 1;
			default = 0.0f;
		}
		
		silent
		{
			type = 3;
			default = false;
		}
		
		nofallingdamage
		{
			type = 3;
			default = false;
		}
		
		dropactors
		{
			type = 3;
			default = false;
		}
		
		norespawn
		{
			type = 3;
			default = false;
		}
		
		soundsequence
		{
			type = 2;
			default = "";
		}
		
		hidden
		{
			type = 3;
			default = false;
		}
	}
}


/*
MAP LUMP NAMES
Map lumps are loaded with the map as long as they are right after each other. When the editor
meets a lump which is not defined in this list it will ignore the map if not satisfied.
The order of items defines the order in which lumps will be written to WAD file on save.
To indicate the map header lump, use ~MAP

Legenda:
required = Lump is required to exist.
blindcopy = Lump will be copied along with the map blindly. (usefull for lumps Doom Builder doesn't use)
nodebuild = The nodebuilder generates this lump.
allowempty = The nodebuilder is allowed to leave this lump empty.
script = This lump is a text-based script. Specify the filename of the script configuration to use.
*/

doommaplumpnames
{
	REJECT
	{
		allowempty = true;
	}
}


hexenmaplumpnames
{
	REJECT
	{
		allowempty = true;
	}
	
	BEHAVIOR
	{
		required = true;
		nodebuild = false;
		blindcopy = true;
	}
	
	SCRIPTS
	{
		required = false;
		nodebuild = false;
		script = "ZDoom_ACS.cfg";
	}
}


udmfmaplumpnames
{
	BEHAVIOR
	{
		required = false;
		nodebuild = false;
		blindcopy = true;
	}
	
	DIALOGUE
	{
		required = false;
		nodebuild = false;
		script = "ZDoom_USDF.cfg";
	}
	
	ZNODES
	{
		required = false;
		nodebuild = true;
		allowempty = false;
	}
	
	BLOCKMAP
	{
		required = false;
		nodebuild = true;
		allowempty = true;
	}
	
	REJECT
	{
		required = false;
		nodebuild = true;
		allowempty = true;
	}
	
	SCRIPTS
	{
		required = false;
		nodebuild = false;
		script = "ZDoom_ACS.cfg";
	}
}


enums
{
	frontback
	{
		0 = "Front";
		1 = "Back";
	}
	
	backfront
	{
		1 = "Front";
		0 = "Back";
	}
	
	floorceiling
	{
		0 = "Floor";
		1 = "Ceiling";
	}
	
	ceilingfloor
	{
		0 = "Ceiling";
		1 = "Floor";
	}
	
	sector_flags
	{
		1 = "Silent";
		2 = "No Falling Damage";
		4 = "Drop with floor";
		8 = "No Respawn";
	}
	
	keys
	{
		0 = "None";
		1 = "Red key card";
		2 = "Blue key card";
		3 = "Yellow key card";
		4 = "Red skull key";
		5 = "Blue skull key";
		6 = "Yellow skull key";
		100 = "Any key";
		101 = "All keys";
		102 = "Impossible";
		129 = "Any red key";
		130 = "Any blue key";
		131 = "Any yellow key";
		229 = "One of each color";
	}
	
	spawnthing
	{
		0 = "None";
		1 = "Shotgun Guy";
		2 = "Chaingun Guy";
		3 = "Baron Of Hell";
		4 = "Zombieman";
		5 = "Imp";
		6 = "Arachnotron";
		7 = "Spider Mastermind";
		8 = "Demon";
		9 = "Spectre";
		10 = "Imp Fireball";
		11 = "Clip";
		12 = "Shells";
		19 = "Cacodemon";
		20 = "Revenant";
		21 = "Bridge";
		22 = "Armour Bonus";
		23 = "Stimpack";
		24 = "Medkit";
		25 = "Soul Sphere";
		27 = "Shotgun";
		28 = "Chaingun";
		29 = "Rocket Launcher";
		30 = "Plasma Gun";
		31 = "BFG";
		32 = "Chainsaw";
		33 = "Super Shotgun";
		51 = "Plasma Bolt";
		53 = "Tracer";
		68 = "Green Armour";
		69 = "Blue Armour";
		75 = "Cell";
		85 = "Blue Keycard";
		86 = "Red Keycard";
		87 = "Yellow Keycard";
		88 = "Yellow Skullkey";
		89 = "Red Skullkey";
		90 = "Blue Skullkey";
		98 = "Temp Large Flame";
		100 = "Stealth Baron";
		101 = "Stealth Hell Knight";
		102 = "Stealth Zombieman";
		103 = "Stealth Shotgun Guy";
		110 = "Lost Soul";
		111 = "Arch-Vile";
		112 = "Mancubus";
		113 = "Hell Knight";
		114 = "Cyberdemon";
		115 = "Pain Elemental";
		116 = "Wolf SS Soldier";
		117 = "Stealth Arachnotron";
		118 = "Stealth Arch-Vile";
		119 = "Stealth Cacodemon";
		120 = "Stealth Chaingun Guy";
		121 = "Stealth Demon";
		122 = "Stealth Imp";
		123 = "Stealth Mancubus";
		124 = "Stealth Revenant";
		125 = "Barrel";
		126 = "Cacodemon Shot";
		127 = "Rocket (Projectile)";
		128 = "BFG Shot";
		129 = "Arachnotron Plasma Bolt";
		130 = "Blood";
		131 = "Bullet Puff";
		132 = "Megasphere";
		133 = "Invulnerability Sphere";
		134 = "Berserk Pack";
		135 = "Invisibility Sphere";
		136 = "Radiation Suit";
		137 = "Computer Map";
		138 = "Light-Amp Goggles";
		139 = "Box Of Ammo";
		140 = "Rocket (Ammo)";
		141 = "Box Of Rockets";
		142 = "Larce Cell";
		143 = "Box Of Shells";
		144 = "Backpack";
		145 = "Guts";
		146 = "Blood Pool 1";
		147 = "Blood Pool 2";
		148 = "Blood Pool 3";
		149 = "Flaming Barrel";
		150 = "Brains";
		151 = "Scripted Marine";
		152 = "Health Bonus";
		153 = "Mancubus Shot";
		154 = "Baron Fireball";
	}
	
	generic_floor_target
	{
		0 = "Relative offset";
		1 = "Highest neighbor";
		2 = "Lowest neighbor";
		3 = "Nearest neighbor";
		4 = "Lowest neighbor";
		5 = "Ceiling";
		6 = "Shortest lower texture";
	}
	
	generic_ceiling_target
	{
		0 = "Relative offset";
		1 = "Highest neighbor";
		2 = "Lowest neighbor";
		3 = "Nearest neighbor";
		4 = "Highest neighbor";
		5 = "Floor";
		6 = "Shortest lower texture";
	}
	
	generic_door_types
	{
		0 = "Open Close";
		1 = "Open Stay";
		2 = "Close Open";
		3 = "Close Stay";
	}
	
	generic_lift_types
	{
		0 = "Up Stay";
		1 = "Down Up";
		2 = "Down to nearest";
		3 = "Down to lowest";
		4 = "Perpetual raise";
	}

	death_types
	{
		0  = "Unknown";
		12 = "Water";
		13 = "Slime";
		14 = "Lava";
		15 = "Crush";
		16 = "Telefrag";
		17 = "Falling";
		18 = "Suicide";
		19 = "Barrel";
		20 = "Exit";
		21 = "Splash";
		22 = "Hit";
	}
}


// Default thing filters
// (these are not required, just usefull for new users)
thingsfilters_udmf
{
	
	filter0
	{
		name = "Keys only";
		category = "keys";
		type = -1;
	}
	
	
	filter2
	{
		name = "Skill 1";
		category = "";
		type = -1;
		
		fields
		{
			skill1 = true;
		}
		
	}
	
	
	filter3
	{
		name = "Skill 2";
		category = "";
		type = -1;
		
		fields
		{
			skill2 = true;
		}
		
	}
	
	
	filter4
	{
		name = "Skill 3";
		category = "";
		type = -1;
		
		fields
		{
			skill3 = true;
		}
		
	}
	
	
	filter5
	{
		name = "Skill 4";
		category = "";
		type = -1;
		
		fields
		{
			skill4 = true;
		}
		
	}
	
	
	filter6
	{
		name = "Skill 5";
		category = "";
		type = -1;
		
		fields
		{
			skill5 = true;
		}
		
	}
	
	
	filter7
	{
		name = "Skill 6";
		category = "";
		type = -1;
		
		fields
		{
			skill6 = true;
		}
		
	}
	
	
	filter8
	{
		name = "Skill 7";
		category = "";
		type = -1;
		
		fields
		{
			skill7 = true;
		}
		
	}
	
	
	filter9
	{
		name = "Skill 8";
		category = "";
		type = -1;
		
		fields
		{
			skill8 = true;
		}
		
	}
	
}


// How thing flags should be compared (for the stuck thing error check)
thingflagscompare_udmf
{
	skills {
		skill6;
		skill7;
		skill8;
	}

	classes {
		class4;
		class5;
		class6;
		class7;
		class8;
	}
}